@startuml
'https://plantuml.com/class-diagram
package app {

class Main {
    - static final String USER = "postgres"
    - static final String PASSWORD = "postgres"
    - static final String URL = "jdbc:postgresql://localhost:5432/%s?currentSchema=public"
    - static final String DB = "fogs_carport"

    - static final ConnectionPool connectionpool = ConnectionPool.getInstance(USER, PASSWORD, URL, DB)

    + static void main(String[] args)
}

package config {
class ThymeleafConfig{
    + static TemplateEngine templateEngine()
}
}

package services {
class CarportSvgTopView{
    - Svg carportSvg
    - int length
    - int width
    - int beams
    - int rafters
    - int posts
    - double startX
    - double startY
    - double secondX
    - double secondY
    - double thirdX
    - double thirdY
    - double fourthX
    - double fourthY

    + CarportSvgTopView(int length, int width)

    - void addLines()

    + int getBeams()

    + int getRafters()

    + int getPosts()

    - int addBeams()

    - int addRafters()

    - int addPost()

    + String toString()
}

class Svg{
- static final String svgTemplate = "<svg version=\"1.1\"\n" +
            "     x=\"%d\" y=\"%d\"\n" +
            "     viewBox=\"%s\" width=\"%s\" \n" +
            "     height=\"%s\" preserveAspectRatio=\"xMinYMin\">"

    - static final String svgRecTemplate = "<rect x=\"%.2f\" y=\"%.2f\" height=\"%f\" width=\"%f\" style=\"%s\"></rect>"
    - static final String svgArrowDefs = "<defs>\n" +
            "            <marker\n" +
            "                    id=\"beginArrow\"\n" +
            "                    markerWidth=\"12\"\n" +
            "                    markerHeight=\"12\"\n" +
            "                    refX=\"0\"\n" +
            "                    refY=\"6\"\n" +
            "                    orient=\"auto\">\n" +
            "                <path d=\"M0,6 L12,0 L12,12 L0,6\" style=\"fill: #000000;\" />\n" +
            "            </marker>\n" +
            "            <marker\n" +
            "                    id=\"endArrow\"\n" +
            "                    markerWidth=\"12\"\n" +
            "                    markerHeight=\"12\"\n" +
            "                    refX=\"12\"\n" +
            "                    refY=\"6\"\n" +
            "                    orient=\"auto\">\n" +
            "                <path d=\"M0,0 L12,6 L0,12 L0,0 \" style=\"fill: #000000;\" />\n" +
            "            </marker>\n" +
            "        </defs>"

    - static final String svgLine = "<line x1=\"%f\" y1=\"%f\" x2=\"%f\" y2=\"%f\" stroke=\"#000\" stroke-width=\"2\" stroke-dasharray=\"10\"/>\n";
    - StringBuilder svg = new StringBuilder()
+ Svg(int x, int y, String viewBox, String width, String height)

    + void addRectangle(double x, double y, double height, double width, String style)

    + void addLine(double x1, double y1, double x2, double y2)

    + void addArrow(int x1, int y1, int x2, int y2, String style)

    + void addText(int x, int y, int rotation, String text)

    + void addSvg(Svg innerSvg)


    + String toString()
}
}
}

package controllers {
class FormController{
    + static void formInput(Context ctx, ConnectionPool connectionPool) throws DatabaseException
    + static void loadMeasurements(Context ctx, ConnectionPool connectionPool)
}

class OrderController{
    + static boolean deleteOrder(Context ctx, ConnectionPool connectionPool) throws DatabaseException
    + static void getAllOrders(Context ctx, (ConnectionPool ConnectionPool) throws DatabaseException
    + static void getSpecificOrder(Context ctx, ConnectionPool connectionPool)
    + static void updateOrderStatus(Context ctx, ConnectionPool connectionPool)
    + static void updateOrderUser(Context ctx, ConnectionPool connectionPool)
    + static void updateCarport(Context ctx, ConnectionPool connectionPool)
    + static void updateShed(Context ctx, ConnectionPool connectionPool)
    + static void addShed(Context ctx, ConnectionPool connectionPool)
    + static void orderContact(Context ctx)
    + static void sendBill(Context ctx, ConnectionPool connectionPool)
    + static void changePriceManually(Context ctx, ConnectionPool connectionPool)
}

class SystemController{
    + static void load(Context ctx)
}

class UserController{
    + static void login(Context ctx, ConnectionPool connectionPool)
    + static void addAdminUser(Context ctx, ConnectionPool connectionPool)
}
}

package dtos {
class DTOUserCarportOrder {
    - User user
    - Carport carport
    - Order order

    + DTOUserCarportOrder(User user, Carport carport, Order order)
    + User getUser()
    + Carport getCarport()
    + Order getOrder()
}
class DTOOrderCustomer {
    - int id;
    - Date date;
    - String customerNote;
    - int statusId;
    - String customerName;
    - String email;
    - int mobile;
    - String orderStatus;

    + DTOOrderCustomer()
    + int getId()
    + Date getDate()
    + String getCustomerNote()
    + int getStatusId()
    + getEmail()
    + int getMobile()
    + String getOrderStatus()
}
class DTOPartsByMaterials {
    - String name;
    - int length;
    - int amount;
    - String description;

    + DTOPartsByMaterials()
    + String getName()
    + int getLength()
    + int getAmount()
    + String getDescription()
}
class DTOSpecificOrderByOrderIdWithUserAndCarportAndShed {
    - User user
    - Order order
    - Carport carport
    - Shed shed

    + DTOSpecificOrderByOrderIdWithUserAndCarportAndShed()
    + User getUser()
    + Order getOrder()
    + Carport getCarport()
    + Shed getShed()
}
}

package entities {
class User {
    - int id
    - String name
    - String email
    - String password
    - String address
    - int zipcode
    - int mobile
    - String role
    - boolean consent

    + User(int id, String name, String email, String password, String address, int mobile, int role, int zipcode)
    + void setId(int id)
    + void setName(String name)
    + void setEmail(String email)
    + void setPassword(String password)
    + void setAddress(String address)
    + void setMobile(int mobile)
    + void setRole(int role)
    + void setZipcode(int zipcode)
    + int getId()
    + String getName()
    + String getEmail()
    + String getPassword()
    + String getAddress()
    + int getZipcode()
    + int getMobile()
    + String getRole()
    + boolean getConsent()
}

interface Construction {}

class Shed {
    - int id
    - int carportID
    - int width
    - int length

    + Shed(int id, int carportID, int width, int length)
    + Shed(int width), int length)
    + int getId()
    + void setId(int id)
    + int getCarportID()
    + void setCarportID(int carportID)
    + int width()
    + void setWidth(int width))
    + int length()
    + void setLength(int length)
}

class Carport {
    - int id
    - int width
    - int length
    - int height
    - Shed shed

    + Carport(int width, int length, int height)
    + Carport(int id, int width, int length, int height)
    + Carport(int id, int width, int length, int height, Shed shed)
    + int getId()
    + void setId(int id)
    + int getWidth()
    + void setWidth(int width)
    + int getLength()
    + void setLength(int length)
    + int getHeight()
    + void setHeight(int height)
    + Shed getShed()
    + void setShed(Shed shed)
}

class Order{
    - int id
    - Date date
    - String CustomerNote
    - boolean consent
    - int userId
    - String orderStatus
    - int carportId

    + Order(String customerNote)
    + Order(Date date)
    + Order(int id, Date date, String customerNote, boolean consent, int userId, String orderStatus, int carportId)
    + Order(int id, Date date, String customerNote, String orderStatus)
    + int getId()
    + void setId(int id)
    + Date getDate()
    + void setDate(Date date)
    + String getCustomerNote()
    + void setCustomerNote()
    + boolean getConsent()
    + void setConsent(boolean consent)
    + int getUserId()
    + void setUserId(int userId)
    + String getOrderStatus()
    + void setOrderStatus(String orderStatus)
    + int getCarportId()
    + void setCarportId(int carportId)


}

'Connections
Shed ----* Carport
Carport ----* Order
User ----* Order
Shed ---|> Construction
Carport ---|> Construction
}

package exceptions {
class DatabaseException extends Exception{
    + DatabaseException(String message)
}
}

package persistence {

class CarportMapper{
    + static Carport addCarport(Carport carport, ConnectionPool connectionPool) throws DatabaseException
    + static deleteCarportByCarportID(int carportId, ConnectionPool connectionPool) throws DatabaseException
    + static Shed addShed(Shed shed, ConnectionPool connectionPool) throws DatabaseException
    + static void updateCarport(DTOCarportWithIdLengthWidthHeight dtoUser, ConnectionPool connectionPool)
}

class ConnectionPool{
    - static final String DEFAULT_USER = "postgres"
    - static final String DEFAULT_PASSWORD = "postgres"
    - static final String DEFAULT_URL =
    - static final String DEFAULT_DB = "startcode"
    + static ConnectionPool instance = null
    + static HikariDataSource ds = null
    - ConnectionPool()
    + static ConnectionPool getInstance()
    + static ConnectionPool getInstance(String user, String password, String url, String db)
    + synchronized Connection getConnection() throws SQLException
    + synchronized void close()
    - static HikariDataSource createHikariConnectionPool(String user, String password, String url, String db)
}

class MeasurementMapper{
    + static List<Integer> getAllLengths(ConnectionPool connectionPool) throws DatabaseException
    + static List<Integer> getAllWidths(ConnectionPool ConnectionPool) throws DatabaseException
    + static List<Integer> getAllHeights(ConnectionPool ConnectionPool) throws DatabaseException
}

class OrderMapper{
    + static void addOrder(UserCarportOrderDTO dto, ConnectionPool connectionPool) throws DatabaseException
    + static List<Order> getAllOrders(ConnectionPool connectionPool) throws DatabaseException
    + static List<GetOrderWithIdDateCustomerNoteConsentStatus> getAllOrdersByUser(User user, (ConnectionPool connectionPool) throws DatabaseException
    + static String getStatusByID(int statusID, (ConnectionPool connectionPool) throws DatabaseException
    + static void addOrderToExistingUser(DTOUserCarportOrder dto, ConnectionPool connectionPool)
    + static void deleteOrderByOrderID(int orderId, ConnectionPool connectionPool)
    + static DTOOrderUserCarport getOrderById(int orderId, ConnectionPool connectionPool)
    + static Carport getCarportByOrderId(int orderId, ConnectionPool connectionPool)
    + static void updateOrderStatus(int orderId, int statusId, ConnectionPool connectionPool)
    + static Shed getShedByOrderId(int orderId, ConnectionPool connectionPool)
    + static void addShedToOrder(int carportId, int shedId, ConnectionPool connectionPool)
    + static void updateStatusBillSent(int orderID, ConnectionPool connectionPool)
    + static void updateOrderPrice(int orderID, float price, ConnectionPool connectionPool)
    + static Order getOrderById(int id, ConnectionPool connectionPool)
}

class UserMapper{
    + static User addUser(User newUser, ConnectionPool ConnectionPool) throws DatabaseException
    + static User getUserByEmail(String email, ConnectionPool connectionPool) throws DatabaseException
    + static boolean loginValidator(String email, String password, ConnectionPool connectionPool) throws DatabaseException, SQLException
    + static void updateUser(User user, ConnectionPool connectionPool)
}
}

'Connections
exceptions ----* persistence
dtos ----* persistence
entities ----* persistence
persistence ----* controllers
config ----* Main
controllers ----* Main
Svg --* CarportSvgTopView
services ---* controllers

package utility {
class Calculator {
    - static float carportPricePerSqCM
    - static float shedPricePerSqMeter

    + static float carportPriceCalculator(DTOCarportWithIdLengthWidthHeight carport)
    + static float shedPriceCalculator(DTOShedIdLengthWidth shed)
    + static float discountCalculator(float totalPrice, float discountPercentage)
}
class EmailFactory {
    - static String companyMail

    + static void sendOrderQuestion(String customerName, String orderId, String customerEmail, String message)
    + static void sendBill(String customerName, String orderId, String price, String employeeName)
    + static void sendOrderToSalesTeam(String customerName, String length, String width, String height)
    + static void sendMessageToSalesTeam(String customerName, String customerPhone, String customerEmail, String message)
}
class SvgGenerator {
    + static String generateSvg(double length, double width)
    + static void drawStolpe(SVGGraphics2D svgGraphics2D, double length, double width)
    + static void drawSpaer(SVGGraphics2D svgGraphics2D, double length, double width)
}
}

}
!pragma layout smetana
@enduml